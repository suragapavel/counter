{"version":3,"sources":["components/SettingsBlock/SettingsBlock.module.css","components/CounterBlock/Counter.module.css","components/Button/Button.module.css","components/Button/Button.tsx","components/CounterBlock/Counter.tsx","components/SettingsBlock/SettingsBlock.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Button","title","restProps","className","s","button","Counter","props","counterClass","currentValue","maxValue","redValue","counterValue","isError","inputMaxDis","inputStartDis","asd","сounterBlock","dis","errRedMes","errMes","onClick","changeValue","disabled","resetValue","startValue","SettingsBlock","addSett","inputStartClass","redInputBlock","inputBlock","inputMaxClass","isSetDisable","settingsBlock","maxMinValue","onChange","e","changeMaxValue","currentTarget","value","type","changeStartValue","api","getStartValue","localStorage","getItem","getMaxValue","getCurrentValue","setStartValue","setItem","setMaxValue","setCurrentValue","currValue","getInitialValues","startV","this","maxV","currV","App","useState","setDis","setInputMaxDis","setInputStartDis","useEffect","parseInt","newValue","val","toString","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d5448744.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"settingsBlock\":\"SettingsBlock_settingsBlock__1c82o\",\"inputBlock\":\"SettingsBlock_inputBlock__QfEVW\",\"redInputBlock\":\"SettingsBlock_redInputBlock__1fpsb\",\"maxMinValue\":\"SettingsBlock_maxMinValue__XZvlP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"сounterBlock\":\"Counter_сounterBlock__2blSs\",\"counterValue\":\"Counter_counterValue__2WiQJ\",\"errMes\":\"Counter_errMes__vYsR-\",\"errRedMes\":\"Counter_errRedMes__1Hhlk\",\"redValue\":\"Counter_redValue__3hikR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__2bdNf\"};","import {ButtonHTMLAttributes, DetailedHTMLProps} from \"react\";\r\nimport s from './Button.module.css'\r\n\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\nexport type ButtonPropsType = DefaultButtonPropsType & {\r\n    title: 'set' | 'inc' | 'reset'\r\n}\r\n\r\nexport const Button:React.FC<ButtonPropsType> = (\r\n    {\r\n        title,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    return (\r\n        <button className={s.button} {...restProps}> {title}\r\n        </button>\r\n\r\n    )\r\n}","import s from './Counter.module.css'\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype ValueType = {\r\n    resetValue: () => void\r\n    changeValue: () => void\r\n    maxValue: string\r\n    startValue: string\r\n    dis: boolean\r\n    inputMaxDis: boolean\r\n    inputStartDis: boolean\r\n    currentValue: string\r\n}\r\n\r\nexport const Counter = (props: ValueType) => {\r\n\r\n    const counterClass = props.currentValue === props.maxValue ? s.redValue : s.counterValue\r\n    const isError = (props.inputMaxDis || props.inputStartDis)\r\n\r\n    return (\r\n        <div className={s.asd}>\r\n            <div className={s.сounterBlock}>\r\n                {!props.dis\r\n                    ? <div className={counterClass}>{props.currentValue}</div>\r\n                    : isError\r\n                        ? <div className={s.errRedMes}>Incorrect value!</div>\r\n                        : <div className={s.errMes}>enter values and press 'set'</div>}\r\n                <Button\r\n                    onClick={props.changeValue}\r\n                    disabled={props.currentValue === props.maxValue || props.dis}\r\n                    title={'inc'}\r\n                />\r\n                <Button\r\n                    onClick={props.resetValue}\r\n                    disabled={props.currentValue === props.startValue || props.dis}\r\n                    title={'reset'}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import s from './SettingsBlock.module.css'\r\nimport {ChangeEvent} from \"react\";\r\nimport {Button} from \"../Button/Button\";\r\n\r\ntype PropsType = {\r\n    addSett: () => void\r\n    changeStartValue: (startValue: string) => void\r\n    changeMaxValue: (maxValue: string) => void\r\n    dis: boolean\r\n    inputMaxDis: boolean\r\n    inputStartDis: boolean\r\n    startValue: string\r\n    maxValue: string\r\n}\r\n\r\nexport const SettingsBlock = ({ addSett, ...props }: PropsType) => {\r\n\r\n    const onChangeStartValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeStartValue(e.currentTarget.value)\r\n    }\r\n    const onChangeMaxValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        props.changeMaxValue(e.currentTarget.value)\r\n    }\r\n    const inputStartClass = props.inputStartDis ? s.redInputBlock : s.inputBlock\r\n    const inputMaxClass = props.inputMaxDis ? s.redInputBlock : s.inputBlock\r\n\r\n    const isSetDisable = !props.dis || props.inputMaxDis || props.inputStartDis\r\n\r\n    return (\r\n        <div className={s.settingsBlock}>\r\n            <div className={s.maxMinValue}>\r\n                max value\r\n                <input\r\n                    className={inputMaxClass}\r\n                    onChange={onChangeMaxValue}\r\n                    type={\"number\"}\r\n                    value={props.maxValue}\r\n                />\r\n            </div>\r\n            <div className={s.maxMinValue}>\r\n                start value\r\n                <input\r\n                    className={inputStartClass}\r\n                    onChange={onChangeStartValue}\r\n                    type={\"number\"}\r\n                    value={props.startValue}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Button\r\n                    disabled={isSetDisable}\r\n                    onClick={addSett}\r\n                    title={'set'}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport './App.css';\nimport {Counter} from \"./components/CounterBlock/Counter\";\nimport {SettingsBlock} from \"./components/SettingsBlock/SettingsBlock\";\n\n\nconst api = {\n    getStartValue() {\n        return localStorage.getItem('startValue')\n    },\n    getMaxValue() {\n        return localStorage.getItem('maxValue')\n    },\n    getCurrentValue() {\n        return localStorage.getItem('currValue')\n    },\n    setStartValue(startValue: any) {\n        return localStorage.setItem('startValue', startValue)\n    },\n    setMaxValue(maxValue: string) {\n        return localStorage.setItem('maxValue', maxValue)\n    },\n    setCurrentValue(currValue: string) {\n        return localStorage.setItem('currValue', currValue)\n    },\n    getInitialValues() {\n        return {\n            startV: this.getStartValue(),\n            maxV: this.getMaxValue(),\n            currV: this.getCurrentValue(),\n        }\n    }\n}\n\n\nfunction App() {\n    const [startValue, setStartValue] = useState<string>('0')\n    const [maxValue, setMaxValue] = useState<string>('0')\n    const [currentValue, setCurrentValue] = useState<string>('0')\n    const [dis, setDis] = useState<boolean>(true)\n    const [inputMaxDis, setInputMaxDis] = useState<boolean>(false)\n    const [inputStartDis, setInputStartDis] = useState<boolean>(false)\n\n    useEffect(() => {\n        if (api.getInitialValues().startV || api.getInitialValues().maxV || api.getInitialValues().currV) {\n            api.getInitialValues().startV && setStartValue(api.getInitialValues().startV!)\n            api.getInitialValues().maxV && setMaxValue(api.getInitialValues().maxV!)\n            api.getInitialValues().currV && setCurrentValue(api.getInitialValues().currV!)\n        }\n\n    }, [])\n    useEffect(() => {\n        api.setCurrentValue(currentValue)\n        setDis(false)\n    }, [currentValue])\n\n    const changeStartValue = (newValue: string) => {\n        setStartValue(newValue)\n        if (parseInt(newValue) >= 0 || parseInt(maxValue) >= 0) {\n            setDis(true)\n            setInputStartDis(false)\n            setInputMaxDis(false)\n        }\n        if (parseInt(newValue) < 0) {\n            setInputStartDis(true)\n        }\n        if (parseInt(newValue) >= parseInt(maxValue)) {\n            setInputMaxDis(true)\n            setInputStartDis(true)\n        }\n    }\n    const changeMaxValue = (newValue: string) => {\n        setMaxValue(newValue)\n        if (parseInt(newValue) >= 0 || parseInt(startValue) >= 0) {\n            setDis(true)\n            setInputMaxDis(false)\n            setInputStartDis(false)\n        }\n        if (parseInt(newValue) < 0) {\n            setInputMaxDis(true)\n        }\n        if (parseInt(newValue) <= parseInt(startValue)) {\n            setInputMaxDis(true)\n            setInputStartDis(true)\n        }\n    }\n\n    const addSett = () => {\n        if (parseInt(startValue) < parseInt(maxValue) && parseInt(startValue) >= 0 && parseInt(maxValue) >= 0) {\n            setDis(false)\n            api.setMaxValue(maxValue)\n            api.setStartValue(startValue)\n            resetValue()\n        }\n    }\n\n    const changeValue = () => {\n        let val = parseInt(currentValue) + 1\n        setCurrentValue(val.toString())\n    }\n    const resetValue = () => {\n        setCurrentValue(startValue)\n    }\n\n    return (\n        <div className={'App'}>\n            <SettingsBlock\n                inputMaxDis={inputMaxDis}\n                inputStartDis={inputStartDis}\n                dis={dis}\n                addSett={addSett}\n                changeStartValue={changeStartValue}\n                changeMaxValue={changeMaxValue}\n                startValue={startValue}\n                maxValue={maxValue}\n            />\n            <Counter\n                inputMaxDis={inputMaxDis}\n                inputStartDis={inputStartDis}\n                dis={dis}\n                currentValue={currentValue}\n                maxValue={maxValue}\n                startValue={startValue}\n                changeValue={changeValue}\n                resetValue={resetValue}/>\n        </div>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}